snippet fi "py.test fixture" b
@pytest.fixture
def ${1}(${2:self}):
	${3}
endsnippet

snippet fm "py.test with mock.patch.object" b
@pytest.yield_fixture()
def ${1}(${2:self}):
	with mock.patch.object(${3}, '${4}') as m:
		yield m
endsnippet

snippet fma "py.test mock fixture" b
@pytest.yield_fixture(autouse=True)
def ${1}(${2:self}):
	with mock.patch.object(${3}, '${4}') as m:
		yield m
endsnippet

snippet fms "py.test mock autospec" b
@pytest.fixture
def mock_${1}(self):
	return mock.create_autospec(${0})
endsnippet

snippet tc "Test class" b
class Test${1}(object): def test_${2}(self):
		${0:assert False is True}
endsnippet

snippet t "test method" b
def test_${2}(self):
	${0:assert False is True}
endsnippet

snippet c "Class" b
class ${1}(${2:object}):

	def ${3:__init__}(${4:self}):
		${0:pass}
endsnippet

snippet init "simple init" b
def __init__(${1:self}):
	${0:pass}
endsnippet

snippet error "Class error" b
class ${1}Error(AmazonError):
	${0:pass}
endsnippet

snippet m "Method" b
def ${1}(${2:self}):
	${0:return None}
endsnippet

snippet f "Function" b
def ${1}(${2}):
	${0:return None}
endsnippet

snippet p "Property" b
@property
def ${1}(self):
	${0:return None}
endsnippet

snippet ifn "if not" b
if not ${2:object}:
	${0:pass}
endsnippet

snippet as "Vanilla assert something" b
assert ${1:exp}
endsnippet

snippet ae "Vanilla assert equal" b
assert ${1:exp} == ${2:expected}
endsnippet

snippet at "Vanilla assert True" b
assert ${0:exp} is True
endsnippet

snippet af "Vanilla assert False" b
assert ${0:exp} is False
endsnippet

snippet an "Vanilla assert is None" b
assert ${0:exp} is None
endsnippet

snippet ann "Assert is not None" b
assert ${0:exp} is not None
endsnippet

snippet aex "with pytest.raises" b
with pytest.raises(${1}) as ex:
	${0:pass}
endsnippet
