
snippet pyfd "fixture decorator" b
@pytest.fixture
endsnippet

snippet pymu "pytest.mark.usefixtures" b
@pytest.mark.usefixtures('${0}')
endsnippet

snippet pyf "py.test fixture" b
@pytest.fixture
def ${1}(${2:self}):
	${3}
endsnippet

snippet pyyf "py.test yield_fixture" b
@pytest.yield_fixture
def ${1}(${2:self}):
	${3}
endsnippet

snippet pym "py.test request.node.get_marker" b
marker = request.node.get_marker('${1}')
${2:value} = marker.args[${3:0}] if marker else ${4} 
endsnippet

snippet mpo "@mock.patch.object" b
@mock.patch.object(${3}, '${4}')
endsnippet

snippet wmpo "with mock.patch.object" b
with mock.patch.object(${3}, '${4}') as m:
	yield m
endsnippet

snippet wmp "with mock.patch module or function" b
with mock.patch(${3}, '${4}') as m:
	yield m
endsnippet

snippet wpyr "with pytest.raises" b
with pytest.raises(${1}) as ex:
	${2:pass}
assert ex is not None
assert ex.value.message == '${0}'
endsnippet

snippet ma "py.test mock autospec" b
${1:return }mock.create_autospec(${0})
endsnippet

snippet tc "test class" b
class Test${1}(object): 

	def test_${2}(self):
		${0:assert False is True}
endsnippet

snippet t "test method" b
def test_${2}(self):
	${0:assert False is True}
endsnippet

snippet c "class" b
class ${1}(${2:object}):

	def ${3:__init__}(${4:self}):
		${0:pass}
endsnippet

snippet init "simple init" b
def __init__(${1:self}):
	${0:pass}
endsnippet

snippet error "Class error" b
class ${1}Error(AmazonError):
	${0:pass}
endsnippet

snippet m "Method" b
def ${1}(${2:self}):
	${0:return None}
endsnippet

snippet cm "class method" b
@classmethod
def ${1}(${2:cls}):
	${0:return None}
endsnippet

snippet sm "static method" b
@staticmethod
def ${1}(${2}):
	${0:return None}
endsnippet

snippet f "Function" b
def ${1}(${2}):
	${0:return None}
endsnippet

snippet p "Property" b
@property
def ${1}(self):
	${0:return None}
endsnippet

snippet ifn "if not" b
if not ${2:object}:
	${0:pass}
endsnippet

snippet as "Vanilla assert something" b
assert ${1:exp}
endsnippet

snippet ae "Vanilla assert equal" b
assert ${1:exp} == ${2:expected}
endsnippet

snippet at "Vanilla assert True" b
assert ${0:exp} is True
endsnippet

snippet af "Vanilla assert False" b
assert ${0:exp} is False
endsnippet

snippet an "Vanilla assert is None" b
assert ${0:exp} is None
endsnippet

snippet ann "Vanilla assert is not None" b
assert ${0:exp} is not None
endsnippet

snippet aii "Vanilla assert isinstance" b
assert isinstance(${0:object}, ${0:type})
endsnippet

snippet anc "Vanilla assert not called" b
assert not mock_${0}.called
endsnippet

snippet fore "for loop with index" b
for idx, ${1:item} in enumerate(${2:iterable}):
	${3:pass}
endsnippet

snippet ford "for loop on dicts" b
for ${1:key}, ${2:value} in ${0:d}.iteritems():
	pass
endsnippet

